Phyloseq Code

# Install Phyloseq
```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("phyloseq")
```

# Load required packages
```{r}
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
library(MicEco)
# You probably have to install BiMiCo before you can load it. The code for installing BiMiCo can be found near the end of this document
```

# Load taxa and seqtab.nochim
```{r}
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
```

# Import metadata
```{r}
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
```

# Create phyloseq object
```{r}
# make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), sample_data(metadata), tax_table(taxa))
physeq
```

# Transform sample counts
```{r}
# convert from raw to relative abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0))
physeq
```

# Remove the sequence itself and replace with ASV
```{r}
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
```

# Remove mitochondria and chloroplast matches. Remove all non bacterial sequences
```{r}
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) & Order!="Chloroplast" | is.na(Order) )
physeq
```

# Install BiMiCo
```{r}
install.packages("remotes")
remotes::install_github("peterolah001/BiMiCo")
```

# Remove all non bacterial sequences
```{r}
physeq<-rm_nonbac(physeq)
physeq
```

# Save physeq objects to load later
```{r}
save(physeq, file="RData/physeq.RData")
```

# Pushing to GitHub
# Open Ubuntu
# Navigate to bioinformatics folder (insert your own user name after /Users/)
cd /mnt/c/Users/eh040/Desktop/Bioinformatics
git status
# To upload all of the MicrobiomeDADA2 files, type in "git add filename". You'll have to do each one individually
# Once previous step is completed:
git status
# All the files you want to upload should be listed in green
git commit -m "phyloseq"
git push

# Load physeq objects to start here
```{r}
load("RData/physeq.RData")
```

# Plot bar graph based on phylum
```{r}
plot_bar(physeq, fill = "Phyum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill")
```

# Create a barplot of realative abundance
```{r}
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x / sum(x))

# barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales = "free")
```

# Plot alpha diversity based on body site
```{r}
plot_richness(physeq, x="body.site", color= "subject", measures=c("Observed","Simpson", "Shannon"))
```

# Plot alpha diversity based on reported antibitic usage
```{r}
plot_richness(physeq, x="reported.antibiotic.usage", color= "body.site", measures=c("Observed","Simpson", "Shannon"))
```

# Plot alpha diversity based on subject
```{r}
plot_richness(physeq, x="subject", color= "body.site", measures=c("Observed","Simpson", "Shannon"))
```

# Test for normality
# For every sample, it pulls out the richness categories we are interested in
```{r}
alpha <- estimate_richness(physeq, measures=c("Observed","Simpson", "Shannon"))

# shapiro-wilk
# A particular test for normality used if there are less than 50 samples
# $ sign tells the computer which column to do the test on
# Null hypothesis is that the data are normally distributed; Alternative hypothesis is that the data are not normally distributed (p-value < 0.05 = data is not normally distributed; p-value > 0.05 = data is normally distributed)
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)

# print
print(observed)
print(shannon)
print(simpson)
```

# Create data frames for statistical analysis
# merges metadata file with diversity indexes
```{r}
# extract sample information from the physeq object
samples <- sample_data(physeq)

# if samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) == "sample_data") {samples <- data.frame(sample_data(samples))}

# add a column to alpha with sample names
alpha$sample <- rownames(alpha)

# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
```

# Perform statistics based on subject
# t test is only appropriate when your data is normally distributed
# most common test for two data comparisons for not normally distributed data is the wilcox test
```{r}
# perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data = alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data = alpha)
test_shannon <- t.test(Shannon ~ subject, data = alpha)

# printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
```
# there are no significant differences in diversity between the two subjects

# Statistics on reported.antibiotic.usage
```{r}
# perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ reported.antibiotic.usage, data = alpha)
test_simpson <- wilcox.test(Simpson ~ reported.antibiotic.usage, data = alpha)
test_shannon <- t.test(Shannon ~ reported.antibiotic.usage, data = alpha)

# printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
```
# there is a significant diversity between antibiotic treated and untreated samples

# Three or more groups, use ANOVA test if your data is normally distributed. If your data are not normally distributed, then use a kruskal wallace test.
# Just doing ANOVA or kruskal wallace just tells you there is something significantly different. You can identify which comparisons are significantly different using the posthawk test. For non normally distributed data, it is pairwise wilcox test (or Tukey test for ANOVA)
# Test for body site
```{r}
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method="holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method="holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TukeyHSD(shannonanova)
```

# Remove taxa with relative abundance <0.005%
```{r}
minTotRelAbun = .00005
x = taxa_sums(physeq)
keepTaxa = (x / sum(x)) > minTotRelAbun
physeqprune = prune_taxa(keepTaxa, physeq)
physeqprune
```

# Install Devtools (in console)
install.packages("devtools")
library(devtools)
install_github("Russel88/MicEco)

# Number of shared ASVs body.site (found in 25% or more)
```{r}
bodysite=ps_venn(
  physeqprune,
  "body.site",
  fraction = .25,
  weight = FALSE,
  relative = TRUE,
  plot = TRUE
)
bodysite
```

# Bray Curtis dissimilarity is the metric for doing beta diversity calculation. Wil give us a value between 0 ad 1. 0 means they are completely identical, and 1 means highest level of dissimilarity, nothing is the same.
# Set the seed in order to get the same number every time and make the data reproducable (can use any number, does not have to be 777)
# NMDS = Nonmetric Multidimentional scaling
# Bray Curtis Calculation
```{r message=FALSE}
set.seed(777)
dist = phyloseq::distance(physeqprune, method="bray", weighted=TRUE)
ordination = ordinate(physeqprune, method="NMDS", distance=dist)
```

# Bray Curtis Subject Plot
```{r}
braysubject=plot_ordination(physeqprune, ordination, color="subject") + theme_classic() + theme(strip.background = element_blank()) + stat_ellipse(aes(group=subject))
braysubject
```

# Bray Curtis Body Site Plot
```{r}
braybodysite=plot_ordination(physeqprune, ordination, color="body.site") + theme_classic() + theme(strip.background = element_blank()) + stat_ellipse(aes(group=body.site))
braybodysite
```

# Bray Curtis Antibiotic Usage Plot
```{r}
brayabusage=plot_ordination(physeqprune, ordination, color="reported.antibiotic.usage") + theme_classic() + theme(strip.background = element_blank()) + stat_ellipse(aes(group=reported.antibiotic.usage))
brayabusage
```

# Installing vegan (in console)
install.packages("vegan")
library(vegan)

# Bray curtis Subject Statistics
# Testing whether or not there is a significant differents between the reuslts of test subject 1 and 2
# Significance value Pr(>F) = 0.155 > 0.05, no significant difference between subject 1 and subject 2
```{r}
adonis2(dist ~ sample_data(physeqprune)$subject)
```


# The top line is sufficient for comparing only two things the rest of the lines tell us which communities of the four are different from one another.
# The top line tells us if there is a significant difference and the following lines tell us where the difference is
# You always want to look at the permuted p-values
# Bray Curtis Body Site Statistics
```{r}
adonis2(dist ~ sample_data(physeqprune)$body.site)
ps.disper<-betadisper(dist, sample_data(physeqprune)$body.site)
permutest(ps.disper, pair=TRUE)
```

# Bray Curtis Antibiotic Usage Statistics
```{r}
adonis2(dist ~ sample_data(physeqprune)$reported.antibiotic.usage)
```

# Exporting figures as images
# Export Tiff with 300dpi
```{r}
ggsave(
  filename="Fig1.tiff",
  plot = braybodysite,
  width = 200,
  height = 200,
  units = c("mm"),
  dpi = 300,
)
```